def majorVersion = System.getenv("MAJOR_VERSION") ?: "1"
def minorVersion = System.getenv("MINOR_VERSION") ?: "0"
def baseBuildVersion = "0"

def buildVersion = System.getenv("BUILD_NUMBER") ?: baseBuildVersion

version = majorVersion + "." + minorVersion + "." + buildVersion 

task purge(type:Delete) {
  println 'Cleaning up former build files'
  delete 'build/*.zip'
}

task dep(type:Exec, dependsOn: purge) {
  println 'Installing dependencies'
    executable 'sh'
    args '-c', 'pip3 install -r docker/webapp/requirements.txt'
    standardOutput = new ByteArrayOutputStream()
    ext.output = { return standardOutput.toString() }
}

def tarfile = "project-" + version
task packageDistribution(type: Zip, dependsOn: dep) {
    from ('docker/webapp') { into 'app' }
    from ('doc') { into 'doc' }
    archiveFileName = tarfile + ".zip"
    destinationDirectory = file("build")
}

def newVersion = minorVersion.toInteger() + 1

task up(type:Exec, dependsOn: packageDistribution) {
  executable 'sh'
  args '-c', 'curl -v --user "'+nexusUsername+':'+nexusPassword+'" --upload-file build/project-'+version+'.zip http://'+nexusRepo+':'+nexusPort+'/repository/ArchiveZip/projet-fil-rouge/'+version+'/project-'+version+'.zip'
  standardOutput = new ByteArrayOutputStream()
  ext.output = { return standardOutput.toString() }
  doLast {
    environment 'MINOR_VERSION', newVersion
    environment 'BUILD_NUMBER', baseBuildVersion
  }
}